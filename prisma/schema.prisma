// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuarios {
  id_user               Int                     @id @default(autoincrement())
  username              String                  @unique
  avatar_url            String?                 @default("https://acortar.link/49WJnw") // Si no se especifica un avatar, se asigna uno por defecto
  email                 String                  @unique
  password              String
  created_at            DateTime?               @default(now())
  updated_at            DateTime?               @updatedAt
  Publicacion           Publicaciones[]
  Comentario            Comentarios[] // 1 - * Un usuario puede tener muchos comentarios
  Likes                 Likes[] // 1 - * Un usuario puede dar muchos likes
  login                 login[] // 1 - * Un usuario puede tener muchos logins
  UsuarioRolePermission UsuarioRolePermission[]
}

// Table to manage the relationship between users and role-permissions
// One user can have many role-permissions and one role-permission is group of role and permission
model UsuarioRolePermission {
  id_user_role_permission Int            @id @default(autoincrement())
  id_user                 Int
  id_role_permission      Int
  created_at              DateTime?      @default(now())
  user                    Usuarios       @relation(fields: [id_user], references: [id_user], onUpdate: Cascade, onDelete: Cascade)
  role_permission         RolePermission @relation(fields: [id_role_permission], references: [id_role_permission], onUpdate: Cascade, onDelete: Cascade)
}

model Publicaciones {
  id_post    Int           @id @default(autoincrement())
  title      String
  content    String
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt
  id_user    Int           @unique
  user       Usuarios      @relation(fields: [id_user], references: [id_user], onUpdate: Cascade, onDelete: Cascade) // * - 1 Muchas publicaciones pueden tener un usuario
  Comentario Comentarios[] // 1 - * Una publicaci贸n puede tener muchos comentarios
  Likes      Likes[] // 1 - * Una publicaci贸n puede tener muchos likes
}

model Comentarios {
  id_comment Int           @id @default(autoincrement())
  content    String
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt
  id_user    Int
  id_post    Int
  user       Usuarios      @relation(fields: [id_user], references: [id_user], onUpdate: Cascade, onDelete: Cascade) // * - 1 Muchos comentarios pueden tener un usuario
  post       Publicaciones @relation(fields: [id_post], references: [id_post], onUpdate: Cascade, onDelete: Cascade) // * - 1 Muchos comentarios pueden tener una publicaci贸n
}

model Likes {
  id_like    Int           @id @default(autoincrement())
  id_user    Int
  id_post    Int
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt
  user       Usuarios      @relation(fields: [id_user], references: [id_user], onUpdate: Cascade, onDelete: Cascade) // * - 1 Muchos likes pueden tener un usuario
  post       Publicaciones @relation(fields: [id_post], references: [id_post], onUpdate: Cascade, onDelete: Cascade) // * - 1 Muchos likes pueden tener una publicaci贸n
}

// Table to manage the roles of the application
// how admin, user, etc
model Role {
  id_role        Int              @id @default(autoincrement())
  role           String           @unique
  created_at     DateTime?        @default(now())
  updated_at     DateTime?        @updatedAt
  RolePermission RolePermission[] // 1 - * Un rol puede tener muchos permisos
}

// Table to manage the permissions of the application
// how to create, read, update and delete
model Permission {
  id_permission  Int              @id @default(autoincrement())
  permission     String
  created_at     DateTime?        @default(now())
  updated_at     DateTime?        @updatedAt
  RolePermission RolePermission[]
}

// Table to manage the relationship between roles and permissions
// This table is used to assign permissions to roles
model RolePermission {
  id_role_permission    Int                     @id @default(autoincrement())
  id_role               Int
  id_permission         Int
  created_at            DateTime?               @default(now())
  updated_at            DateTime?               @updatedAt
  role                  Role                    @relation(fields: [id_role], references: [id_role], onUpdate: Cascade, onDelete: Cascade)
  permission            Permission              @relation(fields: [id_permission], references: [id_permission], onUpdate: Cascade, onDelete: Cascade)
  UsuarioRolePermission UsuarioRolePermission[]
}

// Table to manage control of user logins to the application
model login {
  id_login   Int      @id @default(autoincrement())
  id_user    Int
  created_at DateTime @default(now())
  user       Usuarios @relation(fields: [id_user], references: [id_user], onUpdate: Cascade, onDelete: Cascade) // * - 1 Muchos logins pueden tener un usuario
}
